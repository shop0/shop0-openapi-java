package io.github.shop0.openapi.graphql;

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLRequest;
import io.github.shop0.openapi.graphql.api.QueryResolver;
import io.github.shop0.openapi.graphql.model.*;

import javax.validation.constraints.NotNull;

public class QueryResolverImpl implements QueryResolver {

    private final Shop0Client client;

    public QueryResolverImpl(Shop0Client client) {
        this.client = client;
    }

    @Override
    public OrderTO order(@NotNull String id) throws Exception {
        OrderQueryRequest req = OrderQueryRequest.builder().setId(id).build();

        OrderResponseProjection proj = new OrderResponseProjection()
                .id()
                .lineItems(new LineItemConnectionResponseProjection()
                        .pageInfo(new PageInfoResponseProjection().all$())
                        .edges(new LineItemEdgeResponseProjection()
                                .cursor()
                                .node(new LineItemResponseProjection()
                                        .id()
                                        .currentQuantity()
                                        .discountedTotalSet(new MoneyBagResponseProjection()
                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                .shopMoney(new MoneyResponseProjection().all$()))
                                        .discountedUnitPriceSet(new MoneyBagResponseProjection()
                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                .shopMoney(new MoneyResponseProjection().all$()))
                                        .image(new ImageResponseProjection()
                                                .originalSrc()
                                                .transformedSrc()
                                        )
                                        .name()
                                        .originalTotalSet(new MoneyBagResponseProjection()
                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                .shopMoney(new MoneyResponseProjection().all$()))
                                        .originalTotalSet(new MoneyBagResponseProjection()
                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                .shopMoney(new MoneyResponseProjection().all$()))
                                        .product(new ProductResponseProjection()
                                                .id()
                                                .title()
                                        )
                                        .quantity()
                                        .requiresShipping()
                                        .sku()
                                        .title()
                                        .totalDiscountSet(new MoneyBagResponseProjection()
                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                .shopMoney(new MoneyResponseProjection().all$()))
                                        .variant(new ProductVariantResponseProjection()
                                                .id()
                                        )
                                        .variantTitle()
                                        .vendor()
                                        .vendorSku()
                                )
                        )

                )
                .cancelReason()
                .cancelledAt()
                .cartDiscountAmountSet(new MoneyBagResponseProjection()
                        .presentmentMoney(new MoneyResponseProjection().all$())
                        .shopMoney(new MoneyResponseProjection().all$()))
                .clientIp()
                .closed()
                .closedAt()
                .createdAt()
                .currencyCode()
                .customer(new CustomerResponseProjection()
                        .id()
                )
                .displayFinancialStatus()
                .displayFulfillmentStatus()
                .email()
                .fulfillable()
                .fulfillments(new FulfillmentResponseProjection()
                        .id()
                        .fulfillmentLineItems(new FulfillmentLineItemConnectionResponseProjection()
                                .pageInfo(new PageInfoResponseProjection().all$())
                                .totalCount()
                                .edges(new FulfillmentLineItemEdgeResponseProjection()
                                        .cursor()
                                        .node(new FulfillmentLineItemResponseProjection()
                                                .id()
                                                .quantity()
                                                .lineItem(new LineItemResponseProjection()
                                                        .id()
                                                        .image(new ImageResponseProjection()
                                                                .originalSrc()
                                                                .transformedSrc()
                                                        )
                                                        .name()
                                                        .product(new ProductResponseProjection()
                                                                .id()
                                                                .title()
                                                        )
                                                        .quantity()
                                                        .requiresShipping()
                                                        .sku()
                                                        .title()
                                                        .variant(new ProductVariantResponseProjection()
                                                                .id()
                                                        )
                                                        .variantTitle()
                                                        .vendor()
                                                        .vendorSku()
                                                )
                                        )
                                )
                        )
                        .createdAt()
                        .deliveredAt()
                        .estimatedDeliveryAt()
                        .inTransitAt()
                        .requiresShipping()
                        .service(new FulfillmentServiceResponseProjection()
                                .handle()
                                .serviceName()
                        )
                        .status()
                        .totalQuantity()
                        .updatedAt()
                )
                .fullyPaid()
                .note()
                .paymentGatewayNames()
                .phone()
                .presentmentCurrencyCode()
                .processedAt()
                .refundable()
                .refunds(new RefundResponseProjection()
                        .id()
                        .refundLineItems(new RefundLineItemConnectionResponseProjection()
                                .pageInfo(new PageInfoResponseProjection().all$())
                                .edges(new RefundLineItemEdgeResponseProjection()
                                        .cursor()
                                        .node(new RefundLineItemResponseProjection()
                                                .lineItem(new LineItemResponseProjection()
                                                        .id()
                                                        .image(new ImageResponseProjection()
                                                                .originalSrc()
                                                                .transformedSrc()
                                                        )
                                                        .name()
                                                        .product(new ProductResponseProjection()
                                                                .id()
                                                                .title()
                                                        )
                                                        .quantity()
                                                        .requiresShipping()
                                                        .sku()
                                                        .title()
                                                        .variant(new ProductVariantResponseProjection()
                                                                .id()
                                                        )
                                                        .variantTitle()
                                                        .vendor()
                                                        .vendorSku()
                                                )
                                                .priceSet(new MoneyBagResponseProjection()
                                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                                        .shopMoney(new MoneyResponseProjection().all$())
                                                )
                                                .quantity()
                                        )
                                )
                        )
                        .createdAt()
                        .note()
                        .reason()
                        .totalRefundedSet(new MoneyBagResponseProjection()
                                .presentmentMoney(new MoneyResponseProjection().all$())
                                .shopMoney(new MoneyResponseProjection().all$()))
                        .updatedAt()
                )
                .requiresShipping()
                .shippingAddress(new MailingAddressResponseProjection().all$())
                .source(new OrderSourceResponseProjection().all$())
                .subtotalLineItemsQuantity()
                .subtotalPriceSet(new MoneyBagResponseProjection()
                        .presentmentMoney(new MoneyResponseProjection().all$())
                        .shopMoney(new MoneyResponseProjection().all$()))
                .test()
                .totalDiscountsSet(new MoneyBagResponseProjection()
                        .presentmentMoney(new MoneyResponseProjection().all$())
                        .shopMoney(new MoneyResponseProjection().all$()))
                .totalPriceSet(new MoneyBagResponseProjection()
                        .presentmentMoney(new MoneyResponseProjection().all$())
                        .shopMoney(new MoneyResponseProjection().all$()))
                .totalReceivedSet(new MoneyBagResponseProjection()
                        .presentmentMoney(new MoneyResponseProjection().all$())
                        .shopMoney(new MoneyResponseProjection().all$()))
                .totalRefundedSet(new MoneyBagResponseProjection()
                        .presentmentMoney(new MoneyResponseProjection().all$())
                        .shopMoney(new MoneyResponseProjection().all$()))
                .totalShippingPriceSet(new MoneyBagResponseProjection()
                        .presentmentMoney(new MoneyResponseProjection().all$())
                        .shopMoney(new MoneyResponseProjection().all$()))
                .totalWeight()
                .unpaid()
                .updatedAt();


        GraphQLRequest graphQLRequest = new GraphQLRequest(req, proj);
        OrderQueryResponse result = this.client.invoke(graphQLRequest, OrderQueryResponse.class);
        if (result.hasErrors()) {
            throw new Shop0ApiException(result.getErrors());
        }
        return result.order();
    }

    @Override
    public @NotNull OrderConnectionTO orders(String after, String before, Integer first, Integer last, String query, Boolean reverse, String savedSearchId, OrderSortKeysTO sortKey) throws Exception {
        OrdersQueryRequest req = OrdersQueryRequest.builder()
                .setAfter(after)
                .setBefore(before)
                .setFirst(first)
                .setLast(last)
                .setQuery(query)
                .setReverse(reverse)
                .setSavedSearchId(savedSearchId)
                .setSortKey(sortKey)
                .build();

        OrderConnectionResponseProjection proj = new OrderConnectionResponseProjection()
                .pageInfo(new PageInfoResponseProjection().all$())
                .totalCount()
                .edges(new OrderEdgeResponseProjection()
                        .cursor()
                        .node(new OrderResponseProjection()
                                .id()
                                .lineItems(new LineItemConnectionResponseProjection()
                                        .pageInfo(new PageInfoResponseProjection().all$())
                                        .edges(new LineItemEdgeResponseProjection()
                                                .cursor()
                                                .node(new LineItemResponseProjection()
                                                        .id()
                                                        .currentQuantity()
                                                        .discountedTotalSet(new MoneyBagResponseProjection()
                                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                                .shopMoney(new MoneyResponseProjection().all$()))
                                                        .discountedUnitPriceSet(new MoneyBagResponseProjection()
                                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                                .shopMoney(new MoneyResponseProjection().all$()))
                                                        .image(new ImageResponseProjection()
                                                                .originalSrc()
                                                                .transformedSrc()
                                                        )
                                                        .name()
                                                        .originalTotalSet(new MoneyBagResponseProjection()
                                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                                .shopMoney(new MoneyResponseProjection().all$()))
                                                        .originalTotalSet(new MoneyBagResponseProjection()
                                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                                .shopMoney(new MoneyResponseProjection().all$()))
                                                        .product(new ProductResponseProjection()
                                                                .id()
                                                                .title()
                                                        )
                                                        .quantity()
                                                        .requiresShipping()
                                                        .sku()
                                                        .title()
                                                        .totalDiscountSet(new MoneyBagResponseProjection()
                                                                .presentmentMoney(new MoneyResponseProjection().all$())
                                                                .shopMoney(new MoneyResponseProjection().all$()))
                                                        .variant(new ProductVariantResponseProjection()
                                                                .id()
                                                        )
                                                        .variantTitle()
                                                        .vendor()
                                                )
                                        )

                                )
                                .cancelReason()
                                .cancelledAt()
                                .cartDiscountAmountSet(new MoneyBagResponseProjection()
                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                        .shopMoney(new MoneyResponseProjection().all$()))
                                .clientIp()
                                .closed()
                                .closedAt()
                                .createdAt()
                                .currencyCode()
                                .customer(new CustomerResponseProjection()
                                        .id()
                                )
                                .displayFinancialStatus()
                                .displayFulfillmentStatus()
                                .email()
                                .fulfillable()
                                .fullyPaid()
                                .note()
                                .paymentGatewayNames()
                                .phone()
                                .presentmentCurrencyCode()
                                .processedAt()
                                .refundable()
                                .requiresShipping()
                                .shippingAddress(new MailingAddressResponseProjection().all$())
                                .source(new OrderSourceResponseProjection().all$())
                                .subtotalLineItemsQuantity()
                                .subtotalPriceSet(new MoneyBagResponseProjection()
                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                        .shopMoney(new MoneyResponseProjection().all$()))
                                .test()
                                .totalDiscountsSet(new MoneyBagResponseProjection()
                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                        .shopMoney(new MoneyResponseProjection().all$()))
                                .totalPriceSet(new MoneyBagResponseProjection()
                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                        .shopMoney(new MoneyResponseProjection().all$()))
                                .totalReceivedSet(new MoneyBagResponseProjection()
                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                        .shopMoney(new MoneyResponseProjection().all$()))
                                .totalRefundedSet(new MoneyBagResponseProjection()
                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                        .shopMoney(new MoneyResponseProjection().all$()))
                                .totalShippingPriceSet(new MoneyBagResponseProjection()
                                        .presentmentMoney(new MoneyResponseProjection().all$())
                                        .shopMoney(new MoneyResponseProjection().all$()))
                                .totalWeight()
                                .unpaid()
                                .updatedAt()
                        )
                );


        GraphQLRequest graphQLRequest = new GraphQLRequest(req, proj);
        OrdersQueryResponse result = this.client.invoke(graphQLRequest, OrdersQueryResponse.class);
        if (result.hasErrors()) {
            throw new Shop0ApiException(result.getErrors());
        }
        return result.orders();
    }

    @Override
    public CustomerTO customer(@NotNull String id) throws Exception {
        return null;
    }

    @Override
    public ProductTO product(@NotNull String id) throws Exception {
        ProductQueryRequest req = new ProductQueryRequest();
        req.setId(id);

        ProductResponseProjection proj = this.getProductResponseProjection();
        GraphQLRequest graphQLRequest = new GraphQLRequest(req, proj);
        ProductQueryResponse result = this.client.invoke(graphQLRequest, ProductQueryResponse.class);
        if (result.hasErrors()) {
            throw new Shop0ApiException(result.getErrors());
        }

        return result.product();
    }

    @Override
    public ProductVariantTO productVariant(@NotNull String id) throws Exception {
        return null;
    }

    @Override
    public @NotNull ShopTO shop() throws Exception {
        return null;
    }

    public OrderResponseProjection getOrderResponseProjection() {
        OrderResponseProjection proj = new OrderResponseProjection()
                .id()
//                .discountApplications(null)
//                .events(null)
                .shippingAddress(new MailingAddressResponseProjection().all$())
                .shippingLine(new ShippingLineResponseProjection()
                                .originalPriceSet(new MoneyBagResponseProjection().all$())
                                .phone()
/*                        .requestedFulfillmentService(new FulfillmentServiceResponseProjection()
                                .location(new LocationResponseProjection()
                                        .inventoryLevel(new LocationInventoryLevelParametrizedInput().inventoryItemId("111"), new InventoryLevelResponseProjection().id())
                                        .fulfillmentService(new FulfillmentServiceResponseProjection().id())
                                )
                        )*/
                )
//                .subtotalLineItemsQuantity()
//                .tags(null)
                .refunds(new RefundResponseProjection()
                        .id()
                        .refundLineItems(new RefundLineItemConnectionResponseProjection()
                                .edges(new RefundLineItemEdgeResponseProjection()
                                        .node(new RefundLineItemResponseProjection()
                                                .lineItem(new LineItemResponseProjection()
//                                                        .fulfillmentStatus()
                                                        .id()
                                                        .product(new ProductResponseProjection()
                                                                .id()
                                                                .title()
                                                                .images(new ImageConnectionResponseProjection()
                                                                        .edges(new ImageEdgeResponseProjection()
                                                                                .node(new ImageResponseProjection().all$())))
                                                                .description()
                                                                .details()
                                                        )
                                                        .quantity()
                                                        .sku())
                                                .location(new LocationResponseProjection()
                                                        .address(new LocationAddressResponseProjection().all$()))
                                                .priceSet(new MoneyBagResponseProjection().all$())
                                                .quantity()))))
//                .totalWeight()
//                .refundable()
                .processedAt()
//                .metafields(null)
//                .metafield(null)
//                .privateMetafields(null)
//                .privateMetafield(null)
//                .fullyPaid()
                .lineItems(new LineItemConnectionResponseProjection()
                        .edges(new LineItemEdgeResponseProjection()
                                .node(new LineItemResponseProjection()
//                                        .fulfillmentStatus()
                                                .id()
                                                .image(new ImageResponseProjection().all$())
                                                .product(new ProductResponseProjection()
                                                        .id()
                                                        .title()
                                                        .images(new ImageConnectionResponseProjection()
                                                                .edges(new ImageEdgeResponseProjection()
                                                                        .node(new ImageResponseProjection().all$())))
                                                        .description()
                                                        .details()
                                                )
                                                .quantity()
                                                .sku()
                                                .title()
                                )))
                .fulfillments(new FulfillmentResponseProjection()
                                .id()
//                        .displayStatus()
                                .createdAt()
                                .updatedAt()
//                        .status()
                )
//                .risks(null)
//                .totalCapturableSet(null)
//                .totalDiscountsSet(null)
//                .totalOutstandingSet(null)
                .totalPriceSet(new MoneyBagResponseProjection().all$())
//                .totalReceivedSet(null)
//                .totalRefundedSet(null)
//                .totalRefundedShippingSet(null)
//                .totalShippingPriceSet(null)
//                .totalTaxSet(null)
//                .totalTipReceivedSet(null)
//                .subtotalPriceSet(null)
//                .transactions(null)
                .unpaid()
                .updatedAt()
//                .taxesIncluded()
//                .taxLines(new TaxLineResponseProjection())
                ;
        return proj;
    }

    public ProductResponseProjection getProductResponseProjection() {
        ProductResponseProjection proj = new ProductResponseProjection()
                .id()
                .title()
                .createdAt()
                .images(new ImageConnectionResponseProjection().edges(new ImageEdgeResponseProjection().node(new ImageResponseProjection().all$())))
//                .media()
//                .metafields()
//                .metafield()
//                .privateMetafields()
//                .privateMetafield()
//                .presentmentPriceRanges()
//                .variants()
//                .availableForSale()
//                .compareAtPriceRange()
                .description()
                .details()
//                .handle()
//                .options()
                .priceRange(new ProductPriceRangeResponseProjection()
                        .minVariantPrice(new MoneyResponseProjection().all$())
                        .maxVariantPrice(new MoneyResponseProjection().all$())
                )
                .productType()
                .publishedAt()
//                .seo()
//                .tags(new TagResponseProjection())
                .totalInventory()
                .updatedAt()
//                .variantBySelectedOptions()
//                .vendor()
                ;
        return proj;
    }
}
