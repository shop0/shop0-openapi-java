extend type Query {
    order(id: ID!): Order
    orders(
        after: String
        before: String
        first: Int
        last: Int
        query: String
        reverse: Boolean
        savedSearchId: ID
        sortKey: OrderSortKeys
    ): OrderConnection!
}

extend type Mutation {
    orderClose(input: OrderCloseInput!): OrderClose!
    orderUpdate(input: OrderInput!): OrderUpdate!
    refundCreate(input: RefundInput!): RefundCreate!
    refundSessionReject(id: ID!, reason: RefundSessionRejectionReasonInput!): RefundSessionReject!
    refundSessionResolve(id: ID!): RefundSessionResolve!
}

type RefundSessionResolve {
    # 更新的退款会话。
    returnSession: RefundSession
    # 执行突变时发生的错误列表。
    userErrors: [RefundSessionResolveUserError!]!
}

type RefundSessionResolveUserError {
    # The error code.
    code: RefundSessionResolveUserErrorCode
    # The path to the input field that caused the error.
    field: [String!]
    # The error message.
    message: String!
}

enum RefundSessionResolveUserErrorCode {
    REFUND_SESSION_INVALID_STATE
    # Refund session has already been rejected.

    REFUND_SESSION_NOT_FOUND
    # Refund session not found.
}

enum RefundSessionStatusReasonRejectionCode {
    # Refund processing failure.
    PROCESSING_ERROR
}

input RefundSessionRejectionReasonInput {
    # The reason code.
    code: RefundSessionStatusReasonRejectionCode!
    # A custom, localized message for the merchant.
    merchantMessage: String
}

type RefundSessionReject {
    returnSession: RefundSession
    userErrors: [RefundSessionRejectUserError!]!
}

type RefundSession {
    id: ID!,
    status: RefundSessionStatus!
}

type RefundSessionStatus {
    # The refund status code.
    code: RefundSessionStatusCode!
    # The refund status reason (if applicable).
    reason: RefundSessionStatusReason
}

type RefundSessionStatusCode {
    # The reason code.
    code: RefundSessionStatusReasonRejectionCode!
    # A custom, localized message for the merchant.
    merchantMessage: String
}

type RefundSessionStatusReason {
    code: RefundSessionStatusReasonRejectionCode!
    merchantMessage: String
}

type RefundSessionRejectUserError {
    # The error code.
    code: RefundSessionRejectUserErrorCode
    # The path to the input field that caused the error.
    field: [String!]
    # The error message.
    message: String!
}

enum RefundSessionRejectUserErrorCode {
    REFUND_SESSION_INVALID_STATE
    # Refund session has already been resolved.

    REFUND_SESSION_NOT_FOUND
    # Refund session not found.
}

input OrderInput {
    # 要添加到订单中的自定义信息，以键值对的形式表示。也称为音符属性
    customAttributes: [AttributeInput!]
    email: String
    id: ID!
    localizationExtensions: [LocalizationExtensionInput!]
    metafields: [MetafieldInput!]
    note: String
    shippingAddress: MailingAddressInput
    tags: [String!]
}

input AttributeInput {
    key: String!
    value: String!
}

input LocalizationExtensionInput {
    # The key for the localization extension.
    key: LocalizationExtensionKey!
    # The localization extension value.
    value: String
}

input MailingAddressInput {
        address1: String
        address2: String
        city: String
        company: String
        country: String
        countryCode: CountryCode
        firstName: String
        id: ID!
        lastName: String
        phone: String
        province: String
        provinceCode: String
        zip: String
}

type OrderUpdate {
    order: Order
    userErrors: [UserError!]!
}

input RefundInput {
    currency: CurrencyCode
    note: String
    notify: Boolean
    orderId: ID!
    refundLineItems: [RefundLineItemInput!]
    shipping: ShippingRefundInput
    transactions: [OrderTransactionInput!]
}

input OrderTransactionInput {
    amount: Float!
    gateway: String!
    kind: OrderTransactionKind!
    orderId: ID!
    parentId: ID
}

input RefundDutyInput {
    dutyId: ID!
    refundType: RefundDutyRefundType
}

input RefundLineItemInput {
    lineItemId: ID!
    locationId: ID
    quantity: Int!
    restockType: RefundLineItemRestockType
}

enum LocalizationExtensionKey {
    SHIPPING_CREDENTIAL_BR
    # Extension key 'shipping_credential_br' for country BR.

    SHIPPING_CREDENTIAL_CN
    # Extension key 'shipping_credential_cn' for country CN.

    SHIPPING_CREDENTIAL_KR
    # Extension key 'shipping_credential_kr' for country KR.

    TAX_CREDENTIAL_BR
    # Extension key 'tax_credential_br' for country BR.

    TAX_CREDENTIAL_IT
    # Extension key 'tax_credential_it' for country IT.

    TAX_EMAIL_IT
    # Extension key 'tax_email_it' for country IT.
}

enum RefundDutyRefundType {
    FULL
    PROPORTIONAL
}

enum OrderTransactionKind {
    VOID
    CAPTURE
    CHANGE
    EMV_AUTHORIZATION
    REFUND
    SALE
    SUGGESTED_REFUND
    AUTHORIZATION
}

input ShippingRefundInput {
    amount: Float
    fullRefund: Boolean
}

type RefundCreate {
    order: Order
    refund: Refund
    userErrors: [UserError!]!
}

type OrderEdge {
    cursor: String!
    node: Order!
}

type OrderConnection {
    totalCount: Int
    edges: [OrderEdge!]!
    pageInfo: PageInfo!
}

enum OrderSortKeys {
    UPDATED_AT
    CUSTOMER_NAME
    FINANCIAL_STATUS
    FULFILLMENT_STATUS
    ID
    ORDER_NUMBER
    PROCESSED_AT
    RELEVANCE
    TOTAL_PRICE
    CREATED_AT
}

type Refund implements Node {
    id: ID!
    refundLineItems(
        after: String
        before: String
        first: Int
        last: Int
        reverse: Boolean = false
    ): RefundLineItemConnection! # The RefundLineItem resources attached to the refund.
    transactions(
        after: String
        before: String
        first: Int
        last: Int
        reverse: Boolean
    ): OrderTransactionConnection!

    # When the refund was created.
    createdAt: DateTime
    # A list of the order's refunded duties.
    duties: [RefundDuty!]
    # Note associated with the refund.
    note: String
    # The order associated with the refund.
    order: Order!
    # Why the order was refunded.
    reason: String
    # Total amount refunded across all the transactions for this refund in shop and presentment currencies.
    totalRefundedSet: MoneyBag!
    # When the refund was last updated.
    updatedAt: DateTime!
}

type OrderTransactionConnection {
    edges: [OrderTransactionEdge!]!
    pageInfo: PageInfo!
}

type OrderTransactionEdge {
    cursor: String!
    node: OrderTransaction!
}

type RefundLineItemConnection {
    edges: [RefundLineItemEdge!]!
    pageInfo: PageInfo!
}

type RefundLineItemEdge {
    cursor: String!
    node: RefundLineItem!
}

type RefundLineItem {
    lineItem: LineItem! # Returns a LineItem resource. This represents the LineItem in the non-refund context.
    location: Location # The inventory restock location.
    priceSet: MoneyBag! # Returns the price of a refunded line item in shop and presentment currencies.
    quantity: Int! # Returns the quantity of a refunded line item.
    restockType: RefundLineItemRestockType! # Represents the type of restock for the refunded line item.
    restocked: Boolean! # Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
    subtotalSet: MoneyBag! # Returns the subtotal price of a refunded line item in shop and presentment currencies.
    totalTaxSet: MoneyBag! # Returns the total tax charged on a refunded line item in shop and presentment currencies.
}

# The type of restock performed for a particular refund line item.
enum RefundLineItemRestockType {
    CANCEL # Refund line item was canceled.
    LEGACY_RESTOCK # Refund line item was restocked, without specifically being identified as a return or cancelation.
    NO_RESTOCK # Refund line item was not restocked.
    RETURN # 退款商品已退回
}

input OrderCloseInput {
    id: ID!
}

type OrderClose {
    order: Order
    userErrors: [UserError!]!
}

type LineItem implements Node {
    id: ID!
    # TODO The subscription contract associated with this line item.
    # contract: SubscriptionContract
    # The line item's quantity minus the removed quantity.
    currentQuantity: Int!
    # List of additional information (metafields) about the line item.
    customAttributes: [Attribute!]!
    # The discounts that have been allocated onto the line item by discount applications.
    discountAllocations: [DiscountAllocation!]!
    # The total line price after discounts are applied in shop and presentment currencies.
    discountedTotalSet: MoneyBag!
    # The price of a single variant unit after line item discounts are applied in shop and presentment currencies.
    discountedUnitPriceSet: MoneyBag!
    # The duties associated with the line item.
    duties: [Duty!]!
    # The total number of units to fulfill.
    fulfillableQuantity: Int!
    # Name of the service provider who fulfilled the order.
    # Valid values are either manual or the name of the provider. For example, amazon, shipwire.
    fulfillmentService: FulfillmentService!
    # The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity, 'partial' if fulfillableQuantity > 0, and 'unfulfilled' otherwise.
    fulfillmentStatus: String!
    # The Image object associated to the line item's variant.
    image(
        # Crops the image according to the specified region. This argument is deprecated: Use crop on Image.transformedSrc instead.
        crop: CropRegion
        # Image height in pixels between 1 and 2048. This argument is deprecated: Use maxHeight on Image.transformedSrc instead.
        maxHeight: Int
        # Image width in pixels between 1 and 2048. This argument is deprecated: Use maxWidth on Image.transformedSrc instead.
        maxWidth: Int
        # Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use scale on Image.transformedSrc instead.
        scale: Int = 1
    ): Image
    # Whether the line item can be edited or not.
    merchantEditable: Boolean!
    # Name of the product.
    name: String!
    # A count of the number of line items that cannot be fulfilled.
    nonFulfillableQuantity: Int!
    # Total price (without discounts) of the line item, based on the original unit price of the variant x quantity in shop and presentment currencies.
    originalTotalSet: MoneyBag!
    # Variant price without any discounts applied in shop and presentment currencies.
    originalUnitPriceSet: MoneyBag!
    # The Product object associated with this line item's variant.
    product: Product
    # The number of variant items ordered.
    quantity: Int!
    # The line item's quantity minus its refundedQuantity.
    refundableQuantity: Int!
    # Whether physical shipping is required for the variant.
    requiresShipping: Boolean!
    # Whether the line item's variant has an ID and inventory is managed by Shopify.
    restockable: Boolean!
    # TODO The selling plan details associated with the line item.
    # sellingPlan: LineItemSellingPlan
    # Variant SKU number.
    sku: String
    # The TaxLine object connected to this line item.
    # taxable: Boolean!
    taxLines(first: Int): [TaxLine!]!
    # Whether the variant is taxable.
    taxable: Boolean!
    # Title of the product or variant (this field only applies to custom line items).
    title: String!
    # The sum of all AppliedDiscounts on this line item in shop and presentment currencies.
    totalDiscountSet: MoneyBag!
    # The total discounted value of unfulfilled units in shop and presentment currencies.
    unfulfilledDiscountedTotalSet: MoneyBag!
    # The total value before discount of all unfulfilled units in shop and presentment currencies.
    unfulfilledOriginalTotalSet: MoneyBag!
    # The number of units not yet fulfilled.
    unfulfilledQuantity: Int!
    # The Variant object associated with this line item.
    variant: ProductVariant
    # Name of the variant.
    variantTitle: String
    # Name of the vendor who made the variant.
    vendor: String
    # Variant SKU number of the vendor.
    vendorSku: String
}

type LineItemEdge {
    cursor: String!
    node: LineItem!
}

type LineItemConnection {
    edges: [LineItemEdge!]!
    pageInfo: PageInfo!
}

enum DiscountApplicationAllocationMethod {
    ACROSS # The value is spread across all entitled lines.
    EACH # The value is applied onto every entitled line.
}

enum DiscountApplicationTargetSelection {
    ALL # The discount is allocated onto all the lines.
    ENTITLED # The discount is allocated onto only the lines it is entitled for.
    EXPLICIT # The discount is allocated onto explicitly chosen lines.
}

enum DiscountApplicationTargetType {
    LINE_ITEM # The discount applies onto line items.
    SHIPPING_LINE # The discount applies onto shipping lines.
}

type DiscountApplication {
    allocationMethod: DiscountApplicationAllocationMethod!
    index: Int!
    targetSelection: DiscountApplicationTargetSelection!
    targetType: DiscountApplicationTargetType!
    value: PricingValue!
}

type DiscountApplicationEdge {
    cursor: String!
    node: DiscountApplication!
}

type DiscountApplicationConnection {
    edges: [DiscountApplicationEdge!]!
    pageInfo: PageInfo!
}

type Order implements Node & HasEvents & HasMetafields {
    id: ID!

    # Discounts that have been applied on the order.
    discountApplications(
        after: String # 返回在指定游标之后的元素.
        before: String # 返回在游标之前的元素.
        first: Int # 返回列表中前 n 个元素
        last: Int # 返回列表中最后 n 个元素.
        reverse: Boolean = false # 列表逆序, 默认值: false
    ): DiscountApplicationConnection!

    # List of internal events associated with the order.
    events(
        after: String
        before: String
        first: Int
        last: Int
        query: String
        reverse: Boolean
        sortKey: EventSortKeys
    ): EventConnection!

    # List of fulfillment orders with pagination.
    fulfillmentOrders(
        after: String
        before: String
        displayable: Boolean
        first: Int
        last: Int
        query: String
        reverse: Boolean
    ):  FulfillmentOrderConnection!

    # List of the order's line items.
    lineItems(
        after: String
        before: String
        first: Int
        last: Int
        reverse: Boolean
    ): LineItemConnection!

    # List of localization extensions for the resource.
    localizationExtensions(
        after: String
        before: String
        countryCodes: [CountryCode!]
        first: Int
        last: Int
        purposes: [LocalizationExtensionPurpose!]
        reverse: Boolean
    ): LocalizationExtensionConnection!

    # A paginated list of metafields associated with the resource.
    metafields(
        after: String
        before: String
        first: Int
        last: Int
        namespace: String
        reverse: Boolean
    ): MetafieldConnection!

    # Line items that can't be fulfilled. For example, because some or all of the items have been refunded, or the item is not one which can be fulfilled, such as a tip.
    # These line items would be 'lost' if you only considered the line items in draft fulfillments or fulfillments.
    nonFulfillableLineItems(
        after: String
        before: String
        first: Int
        last: Int
        reverse: Boolean
    ): LineItemConnection!

    # List of private metafields.
    privateMetafields(
        after: String
        before: String
        first: Int
        last: Int
        namespace: String
        reverse: Boolean
    ): MetafieldConnection!

    # List of line items that contains the shipping costs.
    shippingLines(
        after: String
        before: String
        first: Int
        last: Int
        reverse: Boolean
    ): ShippingLineConnection!

    # Generated messages that appear at the top of an order page in the Shopify admin. For example, this is a test order.
    alerts: [ResourceAlert!]!
    # Mailing address provided by the customer. Not all orders have mailing addresses.
    billingAddress: MailingAddress
    # Whether the billing address matches the shipping address.
    billingAddressMatchesShippingAddress: Boolean!
    # Whether the order can be manually marked as paid.
    canMarkAsPaid: Boolean!
    # Whether notifications can be sent to the customer or not.
    canNotifyCustomer: Boolean!
    # Reason the order was canceled. Returns null if the order wasn't canceled.
    cancelReason: OrderCancelReason
    # Date and time when the order was canceled. Returns null if the order wasn't canceled.
    cancelledAt: DateTime
    # Whether payment for the order can be captured. Returns true when the customer's credit card has been authorized for payment and the authorization period has not expired.
    capturable: Boolean!
    # Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
    cartDiscountAmountSet: MoneyBag
    # The ip address of the client that is associated with this order.
    clientIp: String
    # Whether the order is closed.
    closed: Boolean!
    # Date and time when the order closed. If the order is not closed, then this field is null.
    closedAt: DateTime
    # Whether inventory has been reserved for the order.
    confirmed: Boolean!
    # Date and time when the order was created in Shopify.
    createdAt: DateTime!
    # The currency of the store at the time of the order. If payment hasn't occurred, then this field is null.
    currencyCode: CurrencyCode!
    # The amount of the order-level discount minus the amounts for line items that have been returned. This doesn't include line item discounts.
    currentCartDiscountAmountSet: MoneyBag!
    # The sum of the quantities for the line items that contribute to the order's subtotal.
    currentSubtotalLineItemsQuantity: Int!
    # The subtotal of line items and their discounts minus the line items that have been returned. This includes order-level discounts, unless the argument with_cart_discount is set to false. This doesn't include shipping costs and shipping discounts. Taxes are not included unless the order is a taxes-included order.
    currentSubtotalPriceSet: MoneyBag!
    # The taxes charged for the order minus the taxes for line items that have been returned.
    currentTaxLines: [TaxLine!]!
    # The total amount discounted from the order (including order-level and line item discounts) minus the amounts for items that have been returned.
    currentTotalDiscountsSet: MoneyBag!
    # The total amount of duties for the order. If duties aren't applicable, then this value is null.
    currentTotalDutiesSet: MoneyBag
    # The total amount of the order (including taxes and discounts) minus the amounts for line items that have been returned.
    currentTotalPriceSet: MoneyBag!
    # The total of all taxes applied to the order minus the taxes for line items that have been returned.
    currentTotalTaxSet: MoneyBag!
    # The total weight (grams) of the order minus the weights for line items that have been returned.
    currentTotalWeight: UnsignedInt64!
    # Custom information added to the order by your customer (Also referred to as note attributes).
    customAttributes: [Attribute!]!
    # Unique identifier of the customer who placed the order. Not all orders have customers associated with them.
    customer: Customer
    # Whether the customer agreed to receive marketing materials.
    customerAcceptsMarketing: Boolean!
    # Description of the customer's experience with the store leading up to the order. Loaded asynchronously, consumers should poll until the 'ready' field resolves to true.
    customerJourneySummary: CustomerJourneySummary
    # A two-letter or three-letter language code, optionally followed by a region modifier. Example values could be 'en', 'en-CA', 'en-PIRATE'.
    customerLocale: String
    # Discount code provided by the customer.
    discountCode: String
    # Primary address of the customer, which is shown on the order.
    displayAddress: MailingAddress
    # Financial status of the order that can be shown to the merchant. This field does not capture all the possible details of an order's financial state and should only be used for display summary purposes.
    displayFinancialStatus: OrderDisplayFinancialStatus
    # Fulfillment status for the order that can be shown to the merchant. This field does not capture all the possible details of an order's fulfillment state. It should only be used for display summary purposes.
    displayFulfillmentStatus: OrderDisplayFulfillmentStatus!
    # Summary of each dispute associated with the order. Sorted in ascending (ASC) order by ID.
    disputes: [OrderDisputeSummary!]!
    # Whether the order has had any edits applied or not.
    edited: Boolean!
    # Email address provided by the customer.
    email: String
    # Whether there are items that can be fulfilled. After an order is completely fulfilled (or completely refunded without any fulfillments) then this field returns false.
    fulfillable: Boolean!
    # List of shipments for the order.
    fulfillments(first: Int): [Fulfillment!]!
    # Whether the order has been paid in full.
    fullyPaid: Boolean!
    # Whether the merchant added timeline comments to the order.
    hasTimelineComment: Boolean!
    # Whether the order can be edited or not.
    merchantEditable: Boolean!
    # A list of reasons of why the order cannot be edited.
    merchantEditableErrors: [String!]!
    # The metafield associated with the resource.
    metafield(key: String!, namespace: String!): Metafield
    # Unique identifier for the order that appears on the order. For example, #1000 or _Store1001. This value is not unique across multiple stores.
    name: String!
    # Net payment for the order, based on the total amount received - total amount refunded in shop and presentment currencies.
    netPaymentSet: MoneyBag!
    # Contents of the note associated with the order.
    note: String
    # The total amount of duties prior to any applied edits for the order. If duties aren't applicable, then this value is null.
    originalTotalDutiesSet: MoneyBag
    # Total price of the order prior to any applied edits in shop and presentment currencies.
    originalTotalPriceSet: MoneyBag!
    # The payment collection details for an order requiring additional payment.
    paymentCollectionDetails: OrderPaymentCollectionDetails!
    # List of all payment gateways used for the order. For example, authorize_net and Cash on Delivery (COD).
    paymentGatewayNames: [String!]!
    # Phone number provided by the customer.
    phone: String
    # If the order was processed using Shopify POS, then this is its location as provided by the merchant.
    physicalLocation: Location
    # The payment currency of the customer for this order.
    presentmentCurrencyCode: CurrencyCode!
    # Returns a private metafield found by namespace and key.
    privateMetafield(key: String!, namespace: String!): Metafield
    # Date and time when the order was processed. When orders are imported from an app, this date and time may not match the date and time when the order was created.
    processedAt: DateTime!
    # Publication that created the order.
    publication: Publication
    # The difference between suggested and actual refund amounts. A positive value indicates a difference in the merchants favor and a negative value indicates a difference in the customers favor.
    refundDiscrepancySet: MoneyBag!
    # Whether the order can be refunded.
    refundable: Boolean!
    # List of refunds that have been applied to the order.
    refunds(first: Int): [Refund!]!
    # Whether any line item in the order requires physical shipping.
    requiresShipping: Boolean!
    # Whether the order can be restocked.
    restockable: Boolean!
    # Fraud risk level of the order.
    riskLevel: OrderRiskLevel!
    # The order risks associated with this order.
    risks(first: Int): [OrderRisk!]!
    # Mailing address for shipping provided by the customer.
    shippingAddress: MailingAddress
    # Line item that contains the shipping costs.
    shippingLine: ShippingLine
    # The order's source infomation.
    source: OrderSource
    # The sum of the quantities for the line items that contribute to the order's subtotal.
    subtotalLineItemsQuantity: Int!
    # Subtotal of the line items and their discounts (does not contain shipping costs and shipping discounts) in shop and presentment currencies.
    subtotalPriceSet: MoneyBag
    # The details of the suggested refund. This response can be used to submit a RefundCreate mutation.
    suggestedRefund(
        # The duties from the order to include in the refund.
        refundDuties: [RefundDutyInput!]
        # The line items from the order to include in the refund.
        refundLineItems: [RefundLineItemInput!]
        # Whether to refund the full shipping amount.
        refundShipping: Boolean
        # The amount to refund for shipping. Overrides refundShipping.
        shippingAmount: Decimal
        # Whether a refund for all of the refundable line items on an order should be suggested. If true, the suggested refund will be formed from all refundable line items and will ignore any passed in refundLineItems.
        suggestFullRefund: Boolean = false
    ): SuggestedRefund
    # A comma separated list of tags associated with the order. Updating tags overwrites any existing tags that were previously added to the order. To add new tags without overwriting existing tags, use the tagsAdd mutation.
    tags: [Tag!]!
    # Taxes charged for the line item.
    taxLines: [TaxLine!]!
    # Whether taxes are included in the subtotal price of the order.
    taxesIncluded: Boolean!
    # Whether the order is a test. Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
    test: Boolean!
    # Amount authorized for the order, that is uncaptured or undercaptured in shop and presentment currencies.
    totalCapturableSet: MoneyBag!
    # Total amount discounted from the order (includes order-level and line item discounts) in shop and presentment currencies.
    totalDiscountsSet: MoneyBag
    # Total amount of money not yet authorized for the order.
    totalOutstandingSet: MoneyBag!
    # Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
    totalPriceSet: MoneyBag!
    # Total amount received by the customer for the order in shop and presentment currencies.
    totalReceivedSet: MoneyBag!
    # Total amount refunded for the order in shop and presentment currencies.
    totalRefundedSet: MoneyBag!
    # Total amount refunded for shipping in shop and presentment currencies.
    totalRefundedShippingSet: MoneyBag!
    # Total amount charged for shipping the order in shop and presentment currencies.
    totalShippingPriceSet: MoneyBag!
    # Total of all taxes applied to the order in shop and presentment currencies.
    totalTaxSet: MoneyBag
    # Total tip received for the order in shop and presentment currencies.
    totalTipReceivedSet: MoneyBag!
    # Total weight (grams) of the order.
    totalWeight: UnsignedInt64
    # List of all transactions associated with the order.
    transactions(
        # Filter transactions by whether they are capturable. If true, then returns only transactions that represent an authorized payment that can be captured. If false, then returns all transactions.
        capturable: Boolean
        # Truncate the array result to this size.
        first: Int
        # Filter transactions by whether they are manual payments. If true, then returns only transactions that are manual payments. If false, then returns all transactions.
        manuallyResolvable: Boolean
    ): [OrderTransaction!]!
    # Whether no payments have been made for the order. If no payments have been made for the order, then this returns true.
    unpaid: Boolean!
    # Date and time when the order was last modified.
    updatedAt: DateTime!
}

type OrderSource {
    # 订单来自合作方
    partner: String
    # 下单用户在合作方的用户ID
    partnerUserId: String
}

enum OrderDisplayFulfillmentStatus{
    FULFILLED
    IN_PROGRESS
    OPEN
    PARTIALLY_FULFILLED
    PENDING_FULFILLMENT
    RESTOCKED
    SCHEDULED
    UNFULFILLED
}

enum OrderDisplayFinancialStatus {
    AUTHORIZED
    EXPIRED
    PAID
    PARTIALLY_PAID
    PARTIALLY_REFUNDED
    PENDING
    REFUNDED
    VOIDED
}

type Attribute {
    # Key or name of the attribute.
    key: String!
    # Value of the attribute.
    value: String
}

enum OrderCancelReason{
    # The customer wanted to cancel the order.
    CUSTOMER
    # Payment was declined.
    DECLINED
    # The order was fraudulent.
    FRAUD
    # There was insufficient inventory.
    INVENTORY
    # Some other reason not listed.
    OTHER
}

type OrderRisk {
    display: Boolean! # Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
    level: OrderRiskLevel # The likelihood that an order is fraudulent, based on this order risk. The level can be set by Shopify risk analysis or by an app.
    message: String # The risk message that's shown to the merchant in the Shopify admin.
}

enum OrderRiskLevel {
    HIGH # There is a high level of risk that this order is fraudulent.
    LOW # There is a low level of risk that this order is fraudulent.
    MEDIUM # There is a medium level of risk that this order is fraudulent.
}

type ShippingLine {
    carrierIdentifier: String # A reference to the carrier service that provided the rate. Present when the rate was computed by a third-party carrier service.
    code: String # A reference to the shipping method.
    custom: Boolean! # Whether the shipping line is custom or not.
    deliveryCategory: String # The general classification of the delivery method.
    discountAllocations: [DiscountAllocation!]! # The discounts that have been allocated to the shipping line.
    discountedPriceSet: MoneyBag! # The pre-tax shipping price with discounts applied.
    id: ID # Globally unique identifier.
    originalPriceSet: MoneyBag! # The pre-tax shipping price without any discounts applied.
    phone: String # The phone number at the shipping address.
    requestedFulfillmentService: FulfillmentService # The fulfillment service requested for the shipping method. Present if the shipping method requires processing by a third party fulfillment service.
    shippingRateHandle: String # A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
    source: String # Returns the rate source for the shipping line.
    taxLines: [TaxLine!]! # The TaxLine objects connected to this shipping line.
    title: String! # Returns the title of the shipping line.
}

# Represents the information about the tax charged on the associated line item.
type TaxLine {
    priceSet: MoneyBag! # The amount of tax to be charged in shop and presentment currencies.
    rate: Float # The tax rate to be applied.
    ratePercentage: Float # The percentage of the price that the tax rate represents.
    title: String! # The name of the tax.
}

# An amount discounting the line that has been allocated by an associated discount application.
type DiscountAllocation {
    allocatedAmountSet: MoneyBag! # Money amount allocated by the discount application in shop and presentment currencies.
    discountApplication: DiscountApplication! # The discount of which this allocated amount originated from.
}

type OrderTransaction implements Node {
    accountNumber: String # The masked account number associated with the payment method.
    amountSet: MoneyBag! # The amount and currency of the transaction in shop and presentment currencies.
    authorizationCode: String # Authorization code associated with the transaction.
    authorizationExpiresAt: DateTime # The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
    createdAt: DateTime! # Date and time when the transaction was created.
    errorCode: OrderTransactionErrorCode # A standardized error code, independent of the payment provider.
    fees: [TransactionFee!]! # The transaction fees charged on the order transaction.
    formattedGateway: String # The human-readable payment gateway name used to process the transaction.
    gateway: String # The payment gateway used to process the transaction.
    id: ID! # Globally unique identifier.
    kind: OrderTransactionKind! # The kind of transaction.
    manuallyCapturable: Boolean! # Whether the transaction can be manually captured.
    maximumRefundableV2: Money # Specifies the available amount with currency to refund on the gateway. Only available within SuggestedRefund.
    order: Order # 关联的订单
    parentTransaction: OrderTransaction # The associated parent transaction, for example the authorization of a capture.
    paymentIcon(
        crop: CropRegion # Crops the image according to the specified region. This argument is deprecated: Use crop on Image.transformedSrc instead.
        maxHeight: Int # Image height in pixels between 1 and 2048. This argument is deprecated: Use maxHeight on Image.transformedSrc instead.
        maxWidth: Int # Image width in pixels between 1 and 2048. This argument is deprecated: Use maxWidth on Image.transformedSrc instead.
        scale: Int = 1 # Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use scale on Image.transformedSrc instead.
    ): Image # Specifies the payment icon to display for this transaction.
    processedAt: DateTime # Date and time when the transaction was processed.
    settlementCurrency: CurrencyCode # The settlement currency
    settlementCurrencyRate: Float # The rate used when converting the transaction amount to settlement currency.
    # shopifyPaymentsSet: ShopifyPaymentsTransactionSet # Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
    status: OrderTransactionStatus! # The status of this transaction.
    test: Boolean! # Whether the transaction is a test transaction.
    totalUnsettledSet: MoneyBag # Specifies the available amount with currency to capture on the gateway in shop and presentment currencies. Only available when an amount is capturable or manually mark as paid.
}

# A standardized error code, independent of the payment provider
enum OrderTransactionErrorCode {
    UNSUPPORTED_FEATURE # The gateway or merchant configuration doesn't support a feature, such as network tokenization.
    AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED # The maximum amount has been captured.
    AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED # The maximum amount has been refunded.
    AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED # The maximum of 10 authorizations has been captured for an order.
    AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED # The maximum of 10 refunds has been processed for an order.
    AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED # The order was canceled, which canceled all open authorizations.
    AMAZON_PAYMENTS_STALE # The order was not confirmed within three hours.
    AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD # The payment method was invalid.
    CALL_ISSUER # Call the card issuer.
    CARD_DECLINED # The card was declined.
    CONFIG_ERROR # There is an error in the gateway or merchant configuration.
    EXPIRED_CARD # The card is expired.
    GENERIC_ERROR # There was an unknown error with processing the payment.
    INCORRECT_ADDRESS # The address does not match the card number.
    INCORRECT_CVC # The CVC does not match the card number.
    INCORRECT_NUMBER # The card number is incorrect.
    INCORRECT_PIN # The entered PIN is incorrect.
    INCORRECT_ZIP # The ZIP or postal code does not match the card number.
    INVALID_AMOUNT # The amount is either too high or too low for the provider.
    INVALID_COUNTRY # The payment method is not available in the customer's country.
    INVALID_CVC # The format of the CVC is incorrect.
    INVALID_EXPIRY_DATE # The format of the expiry date is incorrect.
    INVALID_NUMBER # The format of the card number is incorrect.
    PAYMENT_METHOD_UNAVAILABLE # The payment method is momentarily unavailable.
    PICK_UP_CARD # The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
    PROCESSING_ERROR # There was an error while processing the payment.
    TEST_MODE_LIVE_CARD # A real card was used but the gateway was in test mode.
}

type TransactionFee implements Node {
    amount: Money! # Amount of the fee.
    flatFee: Money! # Flat rate charge for a transaction.
    flatFeeName: String # Name of the credit card flat fee.
    id: ID! # Globally unique identifier.
    rate: Float! # Percentage charge.
    rateName: String # Name of the credit card rate.
    taxAmount: Money! # Tax amount charged on the fee.
    type: String! # Name of the type of fee.
}

# Transaction status' describe the status of a transaction.
enum OrderTransactionStatus {
    AWAITING_RESPONSE # Awaiting a response.
    ERROR # There was an error while processing the transaction.
    FAILURE # The transaction failed.
    PENDING # The transaction is pending.
    SUCCESS # The transaction succeeded.
    UNKNOWN # The transaction status is unknown.
}

type ShippingLineEdge {
    cursor: String!
    node: ShippingLine!
}

type ShippingLineConnection {
    totalCount: Int
    edges: [ShippingLineEdge!]!
    pageInfo: PageInfo!
}

enum DisputeType{
    # The dispute has turned into a chargeback.
    CHARGEBACK
    # The dispute is in the inquiry phase.
    INQUIRY
}

enum DisputeStatus {
    ACCEPTED
    CHARGE_REFUNDED
    LOST
    NEEDS_RESPONSE
    UNDER_REVIEW
    WON
}

type OrderPaymentCollectionDetails {
    # URL allowing additional payments to be collected on the order.
    additionalPaymentCollectionUrl: URL
}

type OrderDisputeSummary {
    id: ID!
    # The type that the dispute was initiated as.
    initiatedAs: DisputeType!
    # The current status of the dispute.
    status: DisputeStatus!
}

type SuggestedRefund {
    # The total monetary value to be refunded in shop and presentment currencies.
    amountSet: MoneyBag!
    # The sum of all the discounted prices of the line items being refunded.
    discountedSubtotalSet: MoneyBag!
    # The total monetary value available to refund in shop and presentment currencies.
    maximumRefundableSet: MoneyBag!
    # An array of duties that will be refunded to the customer.
    refundDuties: [RefundDuty!]!
    # An array of line items that will be returned to the customer.
    refundLineItems: [RefundLineItem!]!
    # Refund details for shipping costs paid by customer.
    shipping: ShippingRefund!
    # The sum of all the prices of the line items being refunded in shop and presentment currencies.
    subtotalSet: MoneyBag!
    # Array of SuggestedOrderTransaction items.
    suggestedTransactions: [SuggestedOrderTransaction!]!
    # The total cart discount amount that was applied to all line items in this refund.
    totalCartDiscountAmountSet: MoneyBag!
    # The sum of all the duties being refunded from the order in shop and presentment currencies. Must be positive.
    totalDutiesSet: MoneyBag!
    # The sum of all the taxes being refunded from the order (must be positive) in shop and presentment currencies.
    totalTaxSet: MoneyBag!
}

type SuggestedOrderTransaction {
    # The masked account number associated with the payment method.
    accountNumber: String
    # The amount on the order transaction in applicable currencies.
    amountSet: MoneyBag!
    # The human-readable payment gateway name used to process the transaction.
    formattedGateway: String
    # The payment gateway used to process the transaction.
    gateway: String
    # Specifies the kind of the suggested order transaction.
    kind: SuggestedOrderTransactionKind!
    # Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
    maximumRefundableSet: MoneyBag
    # The associated parent transaction, for example the authorization of a capture.
    parentTransaction: OrderTransaction
}

enum SuggestedOrderTransactionKind{
    SUGGESTED_REFUND
}

type ShippingRefund {
    # The monetary value of the shipping fees to be returned in shop and presentment currencies.
    amountSet: MoneyBag!
    # The maximum amount of shipping fees currently refundable in shop and presentment currencies.
    maximumRefundableSet: MoneyBag!
    # The monetary value of the tax allocated to shipping fees to be returned in shop and presentment currencies.
    taxSet: MoneyBag!
}

type Duty {
    id: ID!
    # The ISO code of the country of origin of the line item.
    countryCodeOfOrigin: CountryCode
    # The harmonized system code of the line item.
    harmonizedSystemCode: String
    # The price of the duty for the line item.
    price: MoneyBag!
    # The TaxLine objects connected to the duty for the line item.
    taxLines: [TaxLine!]!
}

type RefundDuty {
    # Returns the amount of a refunded duty in shop and presentment currencies.
    amountSet: MoneyBag!
    # Returns a Duty resource. This represents the Duty in the non-refund context.
    originalDuty: Duty
}

# TODO
type CustomerJourneySummary {
    id: ID!
}

# TODO
type Publication {
    id: ID!
}
